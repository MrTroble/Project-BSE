name: CMake

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  BUILD_TYPE: Release
  VULKAN_SDK: C:/VulkanSDK/1.3.250.1
jobs:
  build_win:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
            submodules: recursive
      - name: Cache
        uses: actions/cache@v3
        with:
           path: ${{github.workspace}}\build\_deps
           key: wincache
      - name: Cache Vulkan SDK
        id: cache-vulkan-sdk
        uses: actions/cache@v1
        with:
          path: "C:\\VulkanSDK"
          key: vulkan-sdk
      - name: Setup Vulkan
        if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
        run: |
            Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.250.1/windows/VulkanSDK-1.3.250.1-Installer.exe" -OutFile VulkanSDK.exe
            ./VulkanSDK.exe in -c --da --al
      - name: Cache VCPKG
        id: cache-vcpkg
        uses: actions/cache@v1
        with:
          path: "${{github.workspace}}\\vcpkg"
          key: vcpkg-cache
      - name: Get VCPKG
        if: steps.cache-vcpkg-sdk.outputs.cache-hit != 'true'
        run: git clone https://github.com/microsoft/vcpkg
      - name: Configure CMake
        run: cmake ./ -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static-release -DVCPKG_MANIFEST_MODE=ON
      - name: Build
        run: cmake --build ${{github.workspace}}\build --config ${{env.BUILD_TYPE}}
      - name: Copy
        run: |
          xcopy ${{github.workspace}}\application\assets\ ${{github.workspace}}\build\Release\assets\ /S/I/Y
          xcopy ${{github.workspace}}\TGEngine\TGEngine\assets\*.* ${{github.workspace}}\build\Release\assets\ /S/I/Y
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TGAppWindows
          path: |
            ${{github.workspace}}\build\Release\TGA*
            ${{github.workspace}}\build\Release\TGI*
            ${{github.workspace}}\build\Release\assets\*.frag
            ${{github.workspace}}\build\Release\assets\*.vert
          if-no-files-found: error
